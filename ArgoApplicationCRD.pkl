/// ArgoApplication is a definition of Argo Application resource.
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml>.
module io.argoproj.v1alpha1.Application

extends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/K8sResource.pkl"

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "argoproj.io/v1alpha1"

fixed kind: "Application"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// Operation contains information about a requested or running operation
operation: Operation?

/// ApplicationSpec represents desired application state. Contains link to repository with application
/// definition and additional parameters link definition revision.
spec: Spec

/// ApplicationStatus contains status information for the application
status: Status?

class Info {
  name: String

  value: String
}

/// InitiatedBy contains information about who initiated the operations
class InitiatedBy {
  /// Automated is set to true if operation was initiated automatically by the application controller.
  automated: Boolean?

  /// Username contains the name of a user who started operation
  username: String?
}

/// Retry controls the strategy to apply if a sync fails
class Retry {
  /// Backoff controls how to backoff on subsequent retries of failed syncs
  backoff: Backoff?

  /// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be
  /// performed.
  limit: Int?
}

/// Backoff controls how to backoff on subsequent retries of failed syncs
class Backoff {
  /// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g.
  /// "2m", "1h")
  duration: String?

  /// Factor is a factor to multiply the base duration after each failed retry
  factor: Int?

  /// MaxDuration is the maximum amount of time allowed for the backoff strategy
  maxDuration: String?
}

/// Sync contains parameters for the operation
class Sync {
  /// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
  dryRun: Boolean?

  /// Manifests is an optional field that overrides sync source with a local directory for development
  manifests: Listing<String>?

  /// Prune specifies to delete resources from the cluster that are no longer tracked in git
  prune: Boolean?

  /// Resources describes which resources shall be part of the sync
  resources: Listing<Resource>?

  /// Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted,
  /// will use the revision specified in app spec.
  revision: String?

  /// Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in
  /// sources field for the application to If omitted, will use the revision specified in app spec.
  revisions: Listing<String>?

  /// Source overrides the source definition set in the application. This is typically set in a Rollback
  /// operation and is nil during a Sync operation
  source: Source?

  /// Sources overrides the source definition set in the application. This is typically set in a Rollback
  /// operation and is nil during a Sync operation
  sources: Listing<Source>?

  /// SyncOptions provide per-sync sync-options, e.g. Validate=false
  syncOptions: Listing<String>?

  /// SyncStrategy describes how to perform the sync
  syncStrategy: SyncStrategy?
}

/// SyncOperationResource contains resources to sync.
class SyncOperationResource {
  group: String?

  kind: String

  name: String

  namespace: String?
}

/// Source overrides the source definition set in the application. This is typically set in a Rollback
/// operation and is nil during a Sync operation
class Source {
  /// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
  chart: String?

  /// Directory holds path/directory specific options
  directory: Directory?

  /// Helm holds helm specific options
  helm: Helm?

  /// Kustomize holds kustomize specific options
  kustomize: Kustomize?

  /// Path is a directory path within the Git repository, and is only valid for applications sourced from
  /// Git.
  path: String?

  /// Plugin holds config management plugin specific options
  plugin: Plugin?

  /// Ref is reference to another source within sources field. This field will not be used if used with a
  /// `source` tag.
  ref: String?

  /// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
  repoURL: String

  /// TargetRevision defines the revision of the source to sync the application to. In case of Git, this
  /// can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver
  /// tag for the Chart's version.
  targetRevision: String?
}

/// Directory holds path/directory specific options
class Directory {
  /// Exclude contains a glob pattern to match paths against that should be explicitly excluded from
  /// being used during manifest generation
  exclude: String?

  /// Include contains a glob pattern to match paths against that should be explicitly included during
  /// manifest generation
  include: String?

  /// Jsonnet holds options specific to Jsonnet
  jsonnet: Jsonnet?

  /// Recurse specifies whether to scan a directory recursively for manifests
  recurse: Boolean?
}

/// Jsonnet holds options specific to Jsonnet
class Jsonnet {
  /// ExtVars is a list of Jsonnet External Variables
  extVars: Listing<Tla>?

  /// Additional library search dirs
  libs: Listing<String>?

  /// TLAS is a list of Jsonnet Top-level Arguments
  tlas: Listing<Tla>?
}

/// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
class Tla {
  code: Boolean?

  name: String

  value: String
}

/// Helm holds helm specific options
class Helm {
  /// FileParameters are file parameters to the helm template
  fileParameters: Listing<FileParameter>?

  /// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by
  /// not appending them to helm template --values
  ignoreMissingValueFiles: Boolean?

  /// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest
  /// generation
  parameters: Listing<Parameter>?

  /// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
  passCredentials: Boolean?

  /// ReleaseName is the Helm release name to use. If omitted it will use the application name
  releaseName: String?

  /// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
  skipCrds: Boolean?

  /// ValuesFiles is a list of Helm value files to use when generating a template
  valueFiles: Listing<String>?

  /// Values specifies Helm values to be passed to helm template, typically defined as a block.
  /// ValuesObject takes precedence over Values, so use one or the other.
  values: String?

  /// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes
  /// precedence over Values.
  valuesObject: Dynamic?

  /// Version is the Helm version to use for templating ("3")
  version: String?
}

/// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
class FileParameter {
  /// Name is the name of the Helm parameter
  name: String?

  /// Path is the path to the file containing the values for the Helm parameter
  path: String?
}

/// HelmParameter is a parameter that's passed to helm template during manifest generation
class Parameter {
  /// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
  forceString: Boolean?

  /// Name is the name of the Helm parameter
  name: String?

  /// Value is the value for the Helm parameter
  value: String?
}

/// Kustomize holds kustomize specific options
class Kustomize {
  /// CommonAnnotations is a list of additional annotations to add to rendered manifests
  commonAnnotations: Mapping<String, String>?

  /// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation
  /// values
  commonAnnotationsEnvsubst: Boolean?

  /// CommonLabels is a list of additional labels to add to rendered manifests
  commonLabels: Mapping<String, String>?

  /// Components specifies a list of kustomize components to add to the kustomization before building
  components: Listing<String>?

  /// ForceCommonAnnotations specifies whether to force applying common annotations to resources for
  /// Kustomize apps
  forceCommonAnnotations: Boolean?

  /// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
  forceCommonLabels: Boolean?

  /// Images is a list of Kustomize image override specifications
  images: Listing<String>?

  /// LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
  labelWithoutSelector: Boolean?

  /// NamePrefix is a prefix appended to resources for Kustomize apps
  namePrefix: String?

  /// NameSuffix is a suffix appended to resources for Kustomize apps
  nameSuffix: String?

  /// Namespace sets the namespace that Kustomize adds to all resources
  namespace: String?

  /// Patches is a list of Kustomize patches
  patches: Listing<Patch>?

  /// Replicas is a list of Kustomize Replicas override specifications
  replicas: Listing<Replica>?

  /// Version controls which version of Kustomize to use for rendering manifests
  version: String?
}

class Patch {
  options: Mapping<String, Boolean>?

  patch: String?

  path: String?

  target: Target?
}

class Target {
  annotationSelector: String?

  group: String?

  kind: String?

  labelSelector: String?

  name: String?

  namespace: String?

  version: String?
}

class Replica {
  /// Number of replicas
  count: Int|String

  /// Name of Deployment or StatefulSet
  name: String
}

/// Plugin holds config management plugin specific options
class Plugin {
  /// Env is a list of environment variable entries
  env: Listing<Env>?

  name: String?

  parameters: Listing<PluginParameter>?
}

/// EnvEntry represents an entry in the application's environment
class Env {
  /// Name is the name of the variable, usually expressed in uppercase
  name: String

  /// Value is the value of the variable
  value: String
}

class PluginParameter {
  /// Array is the value of an array type parameter.
  array: Listing<String>?

  /// Map is the value of a map type parameter.
  map: Mapping<String, String>?

  /// Name is the name identifying a parameter.
  name: String?

  /// String_ is the value of a string type parameter.
  string: String?
}

/// SyncStrategy describes how to perform the sync
class SyncStrategy {
  /// Apply will perform a `kubectl apply` to perform the sync.
  apply: Apply?

  /// Hook will submit any referenced resources to perform the sync. This is the default strategy
  hook: Hook?
}

/// Apply will perform a `kubectl apply` to perform the sync.
class Apply {
  /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag
  /// deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
  force: Boolean?
}

/// Hook will submit any referenced resources to perform the sync. This is the default strategy
class Hook {
  /// Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag
  /// deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
  force: Boolean?
}

/// ApplicationSpec represents desired application state. Contains link to repository with application
/// definition and additional parameters link definition revision.
class Spec {
  /// Destination is a reference to the target Kubernetes server and namespace
  destination: Destination

  /// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
  ignoreDifferences: Listing<IgnoreDifference>?

  /// Info contains a list of information (URLs, email addresses, and plain text) that relates to the
  /// application
  info: Listing<Info>?

  /// Project is a reference to the project this application belongs to. The empty string means that
  /// application belongs to the 'default' project.
  project: String

  /// RevisionHistoryLimit limits the number of items kept in the application's revision history, which
  /// is used for informational purposes as well as for rollbacks to previous versions. This should only
  /// be changed in exceptional circumstances. Setting to zero will store no history. This will reduce
  /// storage used. Increasing will increase the space used to store the history, so we do not recommend
  /// increasing it. Default is 10.
  revisionHistoryLimit: Int?

  /// Source is a reference to the location of the application's manifests or chart
  source: Source?

  /// Sources is a reference to the location of the application's manifests or chart
  sources: Listing<Source>?

  /// SyncPolicy controls when and how a sync will be performed
  syncPolicy: SyncPolicy?
}

/// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored
/// during comparison with live state.
class IgnoreDifference {
  group: String?

  jqPathExpressions: Listing<String>?

  jsonPointers: Listing<String>?

  kind: String

  /// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take
  /// precedence over the desired state defined in the SCM and won't be displayed in diffs
  managedFieldsManagers: Listing<String>?

  name: String?

  namespace: String?
}

/// SyncPolicy controls when and how a sync will be performed
class SyncPolicy {
  /// Automated will keep an application synced to the target revision
  automated: Automated?

  /// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
  managedNamespaceMetadata: ManagedNamespaceMetadata?

  /// Retry controls failed sync retry behavior
  retry: Retry?

  /// Options allow you to specify whole app sync-options
  syncOptions: Listing<String>?
}

/// Automated will keep an application synced to the target revision
class Automated {
  /// AllowEmpty allows apps have zero live resources (default: false)
  allowEmpty: Boolean?

  /// Prune specifies whether to delete resources from the cluster that are not found in the sources
  /// anymore as part of automated sync (default: false)
  prune: Boolean?

  /// SelfHeal specifies whether to revert resources back to their desired state upon modification in the
  /// cluster (default: false)
  selfHeal: Boolean?
}

/// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
class ManagedNamespaceMetadata {
  annotations: Mapping<String, String>?

  labels: Mapping<String, String>?
}

/// ApplicationStatus contains status information for the application
class Status {
  /// Conditions is a list of currently observed application conditions
  conditions: Listing<Condition>?

  /// ControllerNamespace indicates the namespace in which the application controller is located
  controllerNamespace: String?

  /// Health contains information about the application's current health status
  health: Health?

  /// History contains information about the application's sync history
  history: Listing<History>?

  /// ObservedAt indicates when the application state was updated without querying latest git state
  /// Deprecated: controller no longer updates ObservedAt field
  observedAt: String?

  /// OperationState contains information about any ongoing operations, such as a sync
  operationState: OperationState?

  /// ReconciledAt indicates when the application state was reconciled using the latest git version
  reconciledAt: String?

  /// ResourceHealthSource indicates where the resource health status is stored: inline if not set or
  /// appTree
  resourceHealthSource: String?

  /// Resources is a list of Kubernetes resources managed by this application
  resources: Listing<Resource>?

  /// SourceType specifies the type of this application
  sourceType: String?

  /// SourceTypes specifies the type of the sources included in the application
  sourceTypes: Listing<String>?

  /// Summary contains a list of URLs and container images used by this application
  summary: Summary?

  /// Sync contains information about the application's current sync status
  sync: Sync?
}

/// ApplicationCondition contains details about an application condition, which is usually an error or
/// warning
class Condition {
  /// LastTransitionTime is the time the condition was last observed
  lastTransitionTime: String?

  /// Message contains human-readable message indicating details about condition
  message: String

  /// Type is an application condition type
  type: String
}

/// Health contains information about the application's current health status
class Health {
  /// Message is a human-readable informational message describing the health status
  message: String?

  /// Status holds the status code of the application or resource
  status: String?
}

/// RevisionHistory contains history information about a previous sync
class History {
  /// DeployStartedAt holds the time the sync operation started
  deployStartedAt: String?

  /// DeployedAt holds the time the sync operation completed
  deployedAt: String

  /// ID is an auto incrementing identifier of the RevisionHistory
  id: Int

  /// InitiatedBy contains information about who initiated the operations
  initiatedBy: InitiatedBy?

  /// Revision holds the revision the sync was performed against
  revision: String?

  /// Revisions holds the revision of each source in sources field the sync was performed against
  revisions: Listing<String>?

  /// Source is a reference to the application source used for the sync operation
  source: Source?

  /// Sources is a reference to the application sources used for the sync operation
  sources: Listing<Source>?
}

/// OperationState contains information about any ongoing operations, such as a sync
class OperationState {
  /// FinishedAt contains time of operation completion
  finishedAt: String?

  /// Message holds any pertinent messages when attempting to perform operation (typically errors).
  message: String?

  /// Operation is the original requested operation
  operation: Operation

  /// Phase is the current phase of the operation
  phase: String

  /// RetryCount contains time of operation retries
  retryCount: Int?

  /// StartedAt contains time of operation start
  startedAt: String

  /// SyncResult is the result of a Sync operation
  syncResult: SyncResult?
}

/// Operation is the original requested operation
class Operation {
  /// Info is a list of informational items for this operation
  info: Listing<Info>?

  /// InitiatedBy contains information about who initiated the operations
  initiatedBy: InitiatedBy?

  /// Retry controls the strategy to apply if a sync fails
  retry: Retry?

  /// Sync contains parameters for the operation
  sync: Sync?
}

/// SyncResult is the result of a Sync operation
class SyncResult {
  /// ManagedNamespaceMetadata contains the current sync state of managed namespace metadata
  managedNamespaceMetadata: ManagedNamespaceMetadata?

  /// Resources contains a list of sync result items for each individual resource in a sync operation
  resources: Listing<ResourceSyncResult>?

  /// Revision holds the revision this sync operation was performed to
  revision: String

  /// Revisions holds the revision this sync operation was performed for respective indexed source in
  /// sources field
  revisions: Listing<String>?

  /// Source records the application source information of the sync, used for comparing auto-sync
  source: Source?

  /// Source records the application source information of the sync, used for comparing auto-sync
  sources: Listing<Source>?
}

/// ResourceResult holds the operation result details of a specific resource
class ResourceSyncResult {
  /// Group specifies the API group of the resource
  group: String

  /// HookPhase contains the state of any operation associated with this resource OR hook This can also
  /// contain values for non-hook resources.
  hookPhase: String?

  /// HookType specifies the type of the hook. Empty for non-hook resources
  hookType: String?

  /// Kind specifies the API kind of the resource
  kind: String

  /// Message contains an informational or error message for the last sync OR operation
  message: String?

  /// Name specifies the name of the resource
  name: String

  /// Namespace specifies the target namespace of the resource
  namespace: String

  /// Status holds the final result of the sync. Will be empty if the resources is yet to be
  /// applied/pruned and is always zero-value for hooks
  status: String?

  /// SyncPhase indicates the particular phase of the sync that this result was acquired in
  syncPhase: String?

  /// Version specifies the API version of the resource
  version: String
}

/// ResourceStatus holds the current sync and health status of a resource TODO: describe members of this
/// type
class ResourceStatus {
  group: String?

  /// HealthStatus contains information about the currently observed health state of an application or
  /// resource
  health: Health?

  hook: Boolean?

  kind: String?

  name: String?

  namespace: String?

  requiresPruning: Boolean?

  /// SyncStatusCode is a type which represents possible comparison results
  status: String?

  syncWave: Int?

  version: String?
}


/// Summary contains a list of URLs and container images used by this application
class Summary {
  /// ExternalURLs holds all external URLs of application child resources.
  externalURLs: Listing<String>?

  /// Images holds all images of application child resources.
  images: Listing<String>?
}

/// Sync contains information about the application's current sync status
class SyncStatus {
  /// ComparedTo contains information about what has been compared
  comparedTo: ComparedTo?

  /// Revision contains information about the revision the comparison has been performed to
  revision: String?

  /// Revisions contains information about the revisions of multiple sources the comparison has been
  /// performed to
  revisions: Listing<String>?

  /// Status is the sync state of the comparison
  status: String
}

/// ComparedTo contains information about what has been compared
class ComparedTo {
  /// Destination is a reference to the application's destination used for comparison
  destination: Destination

  /// IgnoreDifferences is a reference to the application's ignored differences used for comparison
  ignoreDifferences: Listing<IgnoreDifference>?

  /// Source is a reference to the application's source used for comparison
  source: Source?

  /// Sources is a reference to the application's multiple sources used for comparison
  sources: Listing<Source>?
}

/// Destination is a reference to the application's destination used for comparison
class Destination {
  /// Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if
  /// Server is not set.
  name: String?

  /// Namespace specifies the target namespace for the application's resources. The namespace will only
  /// be set for namespace-scoped resources that have not set a value for .metadata.namespace
  namespace: String?

  /// Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if
  /// Name is not set.
  server: String?
}
